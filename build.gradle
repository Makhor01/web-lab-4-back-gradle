plugins {
    id 'org.springframework.boot' version '3.0.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group 'com.iwishyoujoy'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}
configurations { sshAntTask }
dependencies {
    testImplementation 'org.testng:testng:7.1.0'
    sshAntTask 'org.apache.ant:ant-jsch:1.9.2'
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    implementation 'org.springframework.boot:spring-boot-starter-web:3.0.2'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:3.0.2'
    implementation 'org.postgresql:postgresql:42.5.1'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testImplementation 'org.junit.platform:junit-platform-launcher'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.seleniumhq.selenium:selenium-java:4.20.0'
}

task compileJavAll(type: JavaCompile) {
    description = 'Компиляция исходных кодов проекта'
    dependsOn 'classes'
}


task buildJar(type: Jar) {
    dependsOn compileJavAll
    from sourceSets.main.output
    archiveFileName = 'project.jar'
    destinationDirectory = file("$buildDir/libs")
    description = 'Package compiled source code into a JAR file'
    manifest {
        attributes(
                'Main-Class': 'com.weblab4.Application'
        )
    }

}

tasks.register('cleanProject', Delete) {
    description = 'Удаление скомпилированных классов проекта и временных файлов'
    delete 'build'
}

sourceSets {
    test {
        java.srcDirs = ['src/test/java']
    }
}
test{
    useJUnitPlatform()
}


tasks.register('scp') {
    group = 'lab3'
    description = 'Перемещение собранного проекта по SCP на выбранный сервер по завершению сборки.'
    dependsOn 'buildJar'
    doLast {
        def remoteHost = 'se.ifmo.ru'
        def remoteUser = 's369000'
        def remoteDir = '~/opi'
        def jarFile = "$buildDir/libs/project.jar"
        def remotePort = '2222'
        def password = 'elCY$7029'

        exec {
            commandLine 'sshpass', '-p', password, 'scp', '-P', remotePort, jarFile, "${remoteUser}@${remoteHost}:${remoteDir}"
        }


        println "Собранный проект перемещен на сервер ${remoteHost} в директорию ${remoteDir}."
    }
}

task report {
    dependsOn test
    doLast {
        def testResultsDir = file("${buildDir}/test-results/test")
        if (testResultsDir.exists()) {
            def reportFile = testResultsDir.listFiles().find { it.name.endsWith('.xml') }
            if (reportFile) {
                exec {
                    commandLine 'git', 'add', reportFile.absolutePath
                }
                exec {
                    commandLine 'git', 'commit', '-m', 'Add JUnit test report'
                }
                println "JUnit report found and committed."
            } else {
                println "JUnit report not found. Skipping commit."
            }
        } else {
            println "JUnit report directory not found. Skipping commit."
        }
    }
}